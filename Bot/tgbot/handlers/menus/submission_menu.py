from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

from tgbot.keyboards.reply import submission_menu, submission_control, confirmation_menu
from tgbot.logger import get_logger
from tgbot.config import Config
from tgbot.api.authorization_service import get_frontend_token, is_admin
from tgbot.api.submissions_service import get_submissions_info, get_submission_students, clear_submission_students
from tgbot.middlewares.localization import i18n
from tgbot.misc.emoji import circles_emoji
from tgbot.misc.states import StateShowSubmissionList

_ = i18n.lazy_gettext

logger = get_logger(__name__)


# region Menu handlers
# ‚ûï –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å
async def menu_handler_register_submission(message: types.Message):
    config: Config = message.bot.get('config')

    try:
        user_data = get_frontend_token(message.from_user.id)

        web_app = WebAppInfo(url=f'{config.FRONTEND_URL}/register-submission/{user_data}')

        inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(_('–í—ñ–¥–∫—Ä–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å'), web_app=web_app)]
        ], resize_keyboard=True)

        message_string = ''
        message_string += _("‚ûï –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å") + '\n'
        message_string += _("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å üëá")

        await message.answer(message_string, reply_markup=inline_keyboard)
    except Exception as e:
        logger.exception(e)
        await message.answer(_('–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞'))


# üßæ –ú–æ—ó –∑–∞–ø–∏—Å–∏
async def menu_handler_control_submission(message: types.Message):
    config: Config = message.bot.get('config')

    try:
        user_data = get_frontend_token(message.from_user.id)

        web_app = WebAppInfo(url=f'{config.FRONTEND_URL}/control-submission/{user_data}')

        inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(_('–í—ñ–¥–∫—Ä–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å'), web_app=web_app)]
        ], resize_keyboard=True)

        message_string = ''
        message_string += _("üßæ –ú–æ—ó –∑–∞–ø–∏—Å–∏") + '\n'
        message_string += _("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å üëá")

        await message.answer(message_string, reply_markup=inline_keyboard)
    except Exception as e:
        logger.exception(e)
        await message.answer(_('–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞'))


# region üó≥ –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫
# üó≥ –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫
async def menu_handler_get_submission(message: types.Message, state: FSMContext):
    try:
        submissions_infos = get_submissions_info(message.from_user.id)

        reply_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(_('‚Ü© –ù–∞–∑–∞–¥'))]
            ],
            resize_keyboard=True
        )

        for index, value in enumerate(submissions_infos):
            button = KeyboardButton(f'{circles_emoji[index % 9]} {value["name"]}')
            reply_keyboard.keyboard.append([button])

        await message.answer('–í–∏–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç üëá', reply_markup=reply_keyboard)

        await StateShowSubmissionList.SelectSubmissionInfo.set()

        async with state.proxy() as data:
            data['submissions_infos'] = submissions_infos

    except Exception as e:
        logger.exception(e)
        await message.answer(_('–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞'))


# StateShowSubmissionList SelectSubmissionInfo
async def state_handler_select_submission_info(message: types.Message, state: FSMContext):
    try:
        parsed_message = message.text[2:]

        async with state.proxy() as data:
            submissions_infos = data['submissions_infos']

        submissions_info = [value for value in submissions_infos if value['name'] == parsed_message]

        if not len(submissions_info):
            await message.answer(_('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è!'))
            return

        submissions_info = submissions_info[0]

        async with state.proxy() as data:
            data['submissions_info'] = submissions_info

        submission_students = get_submission_students(submissions_info['id'])

        if not len(submission_students):
            await message.answer(_('–ù–∞ –∑–∞—Ö–∏—Å—Ç –Ω—ñ—Ö—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–≤—Å—è'))
            return

        message_string = ''

        for index, submission_student in enumerate(submission_students):
            message_string += f'{index + 1}) {submission_student} ({submissions_info["type"].replace(".", "")}): '

            submission_count = len(submission_students[submission_student])

            for index2, submission in enumerate(submission_students[submission_student]):
                message_string += f'[{submission}]'

                if index2 < submission_count - 1:
                    message_string += ', '
                else:
                    message_string += ';'

            message_string += '\n'

        if is_admin(message.from_user.id):
            await message.answer(message_string, reply_markup=submission_control)
            await StateShowSubmissionList.SelectAction.set()
            return

        await message.answer(message_string, reply_markup=submission_menu)
        await state.finish()
    except Exception as e:
        logger.exception(e)
        await message.answer(_('–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞'))


# StateShowSubmissionList SelectAction
async def state_handler_select_action(message: types.Message):
    try:
        if message.text == _('‚ùå –û—á–∏—Å—Ç–∏—Ç–∏ —Å–ø–∏—Å–æ–∫'):
            await message.answer(_('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç–∏ —Å–ø–∏—Å–æ–∫?'), reply_markup=confirmation_menu)
            await StateShowSubmissionList.Confirmation.set()
        else:
            await message.answer(_('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è!'))
    except Exception as e:
        logger.exception(e)
        await message.answer(_('–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞'))


# StateShowSubmissionList Confirmation
async def state_handler_confirmation(message: types.Message, state: FSMContext):
    try:
        if message.text == _('‚ùé –°–∫–∞—Å—É–≤–∞—Ç–∏'):
            await message.answer(_('–û—Ç–º–µ–Ω–∞.'), reply_markup=submission_menu)
            await state.finish()
            return
        elif message.text == _('‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏'):
            async with state.proxy() as data:
                submissions_info = data['submissions_info']

            clear_submission_students(submissions_info['id'])

            logger.info(f'{message.from_user.full_name} Cleared submission list: {submissions_info["name"]}')

            await state.finish()
            await message.answer(_('–°–ø–∏—Å–æ–∫ —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–∏–π üëç'), reply_markup=submission_menu)
        else:
            await message.answer(_('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è!'))
            return
    except Exception as e:
        logger.exception(e)
        await message.answer(_('–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞'))
# endregion


# ‚Ü© –ù–∞–∑–∞–¥
async def menu_handler_back(message: types.Message, state: FSMContext):
    await message.answer(message.text, reply_markup=submission_menu)
    await state.finish()


# endregion


def register_submission_menu(dp: Dispatcher):
    dp.register_message_handler(menu_handler_back, text=_('‚Ü© –ù–∞–∑–∞–¥'), state=[
        StateShowSubmissionList.SelectSubmissionInfo,
        StateShowSubmissionList.SelectAction,
        StateShowSubmissionList.Confirmation
    ])

    dp.register_message_handler(menu_handler_register_submission, text=_('‚ûï –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å'), is_logined=True)
    dp.register_message_handler(menu_handler_control_submission, text=_('üßæ –ú–æ—ó –∑–∞–ø–∏—Å–∏'), is_logined=True)

    dp.register_message_handler(menu_handler_get_submission, text=_('üó≥ –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫'), is_logined=True)
    dp.register_message_handler(state_handler_select_submission_info,
                                state=StateShowSubmissionList.SelectSubmissionInfo)
    dp.register_message_handler(state_handler_select_action, state=StateShowSubmissionList.SelectAction)
    dp.register_message_handler(state_handler_confirmation, state=StateShowSubmissionList.Confirmation)
